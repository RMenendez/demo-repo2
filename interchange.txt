
#cloud-config

# Install additional packages on first boot
#
# Default: none
#
# if packages are specified, this apt_update will be set to true
#
# packages may be supplied as a single package name or as a list
# with the format [<package>, <version>] wherein the specifc
# package version will be installed.
packages:
 - bind9
 - bind9utils
 - bind9-doc
 - dnsutils
 - bind9-host



# vim: syntax=yaml
#
# This is the configuration syntax that the write_files module
# will know how to understand. encoding can be given b64 or gzip or (gz+b64).
# The content will be decoded accordingly and then written to the path that is
# provided. 
#
# Note: Content strings here are truncated for example purposes.
#AAAwrite_files:
#AAA- encoding: b64
#AAA  content: CiMgVGhpcyBmaWxlIGNvbnRyb2xzIHRoZSBzdGF0ZSBvZiBTRUxpbnV4...
#AAA  owner: root:root
#AAA  path: /etc/sysconfig/selinux
#AAA  permissions: '0644'
#AAA- content: |
#AAA    # My new /etc/sysconfig/samba file
#AAA
#AAA    SMBDOPTIONS="-D"
#AAA  path: /etc/sysconfig/samba
#AAA- content: !!binary |
#AAA    f0VMRgIBAQAAAAAAAAAAAAIAPgABAAAAwARAAAAAAABAAAAAAAAAAJAVAAAAAAAAAAAAAEAAOAAI
#AAA    AEAAHgAdAAYAAAAFAAAAQAAAAAAAAABAAEAAAAAAAEAAQAAAAAAAwAEAAAAAAADAAQAAAAAAAAgA
#AAA    AAAAAAAAAwAAAAQAAAAAAgAAAAAAAAACQAAAAAAAAAJAAAAAAAAcAAAAAAAAABwAAAAAAAAAAQAA
#AAA    ....
#AAA  path: /bin/arch
#AAA  permissions: '0555'
#AAA- encoding: gzip
#AAA  content: !!binary |
#AAA    H4sIAIDb/U8C/1NW1E/KzNMvzuBKTc7IV8hIzcnJVyjPL8pJ4QIA6N+MVxsAAAA=
#AAA  path: /usr/bin/hello
#AAA  permissions: '0755'


write_files:
- content: |
    options {
     directory "/var/cache/bind";
     dnssec-validation auto;
     auth-nxdomain no;    # conform to RFC1035
     // listen-on-v6 { any; };
     listen-on port 53 { localhost; any; };
     allow-query { localhost; any; };
     forwarders { 8.8.8.8; };
     recursion yes;
     querylog yes;
    };
  path: /etc/bind/named.conf.options







ON HUB

locals {
  prefix-hub         = "hub"
  hub-location       = "North Europe"
  hub-resource-group = "hub-rg"
  # shared-key         = "4-v3ry-53cr37-1p53c-5h4r3d-k3y"  # For VPN connection
}


#### TO TEST CLOUDINIT
### template_cloudinit_config test
data "template_file" "script" {
  template = file("hub/cloud-init2")
}

# Render a multi-part cloud-init config making use of the part
# above, and other source files
data "template_cloudinit_config" "config" {
  gzip          = true
  base64_encode = true

  # Main cloud-config configuration file.
  part {
    filename     = "cloud-init2"
    content_type = "text/cloud-config"
    content      = data.template_file.script.rendered
  }
}
#### TO TEST CLOUDINIT




#### Hub Resource Group
#resource "azurerm_resource_group" "hub-rg" {
#  name     = local.hub-resource-group
#  location = local.hub-location
#}



# The hub VM
resource "azurerm_virtual_machine" "hub-vm" {
  name                  = "hub-vm"
  location            = local.hub-location
  resource_group_name = var.hubRgName
  network_interface_ids = [azurerm_network_interface.hub-nic.id]
  vm_size               = var.vmsize
  delete_os_disk_on_termination = true

  storage_image_reference {
    publisher = "Canonical"
    offer     = "UbuntuServer"
    sku       = "16.04-LTS"
    version   = "latest"
  }

  storage_os_disk {
    name              = "myosdisk1"
    caching           = "ReadWrite"
    create_option     = "FromImage"
    managed_disk_type = "Standard_LRS"
  }

  os_profile {
    computer_name  = "hub-vm"
    admin_username = var.username
    admin_password = var.password
    #custom_data    = file("hub/cloud-init.sh")
    #### TO TEST CLOUDINIT
    custom_data = data.template_cloudinit_config.config.rendered
    #### TO TEST CLOUDINIT
  }

  os_profile_linux_config {
    disable_password_authentication = false
  }
}




