
#cloud-config

# Install additional packages on first boot
#
# Default: none
#
# if packages are specified, this apt_update will be set to true
#
# packages may be supplied as a single package name or as a list
# with the format [<package>, <version>] wherein the specifc
# package version will be installed.
packages:
 - bind9
 - bind9utils
 - bind9-doc
 - dnsutils
 - bind9-host



# vim: syntax=yaml
#
# This is the configuration syntax that the write_files module
# will know how to understand. encoding can be given b64 or gzip or (gz+b64).
# The content will be decoded accordingly and then written to the path that is
# provided. 
#
# Note: Content strings here are truncated for example purposes.
#AAAwrite_files:
#AAA- encoding: b64
#AAA  content: CiMgVGhpcyBmaWxlIGNvbnRyb2xzIHRoZSBzdGF0ZSBvZiBTRUxpbnV4...
#AAA  owner: root:root
#AAA  path: /etc/sysconfig/selinux
#AAA  permissions: '0644'
#AAA- content: |
#AAA    # My new /etc/sysconfig/samba file
#AAA
#AAA    SMBDOPTIONS="-D"
#AAA  path: /etc/sysconfig/samba
#AAA- content: !!binary |
#AAA    f0VMRgIBAQAAAAAAAAAAAAIAPgABAAAAwARAAAAAAABAAAAAAAAAAJAVAAAAAAAAAAAAAEAAOAAI
#AAA    AEAAHgAdAAYAAAAFAAAAQAAAAAAAAABAAEAAAAAAAEAAQAAAAAAAwAEAAAAAAADAAQAAAAAAAAgA
#AAA    AAAAAAAAAwAAAAQAAAAAAgAAAAAAAAACQAAAAAAAAAJAAAAAAAAcAAAAAAAAABwAAAAAAAAAAQAA
#AAA    ....
#AAA  path: /bin/arch
#AAA  permissions: '0555'
#AAA- encoding: gzip
#AAA  content: !!binary |
#AAA    H4sIAIDb/U8C/1NW1E/KzNMvzuBKTc7IV8hIzcnJVyjPL8pJ4QIA6N+MVxsAAAA=
#AAA  path: /usr/bin/hello
#AAA  permissions: '0755'


write_files:
- content: |
    options {
     directory "/var/cache/bind";
     dnssec-validation auto;
     auth-nxdomain no;    # conform to RFC1035
     // listen-on-v6 { any; };
     listen-on port 53 { localhost; any; };
     allow-query { localhost; any; };
     forwarders { 8.8.8.8; };
     recursion yes;
     querylog yes;
    };
  path: /etc/bind/named.conf.options







ON HUB

locals {
  prefix-hub         = "hub"
  hub-location       = "North Europe"
  hub-resource-group = "hub-rg"
  # shared-key         = "4-v3ry-53cr37-1p53c-5h4r3d-k3y"  # For VPN connection
}


#### TO TEST CLOUDINIT
### template_cloudinit_config test
data "template_file" "script" {
  template = file("hub/cloud-init2")
}

# Render a multi-part cloud-init config making use of the part
# above, and other source files
data "template_cloudinit_config" "config" {
  gzip          = true
  base64_encode = true

  # Main cloud-config configuration file.
  part {
    filename     = "cloud-init2"
    content_type = "text/cloud-config"
    content      = data.template_file.script.rendered
  }
}
#### TO TEST CLOUDINIT




#### Hub Resource Group
#resource "azurerm_resource_group" "hub-rg" {
#  name     = local.hub-resource-group
#  location = local.hub-location
#}



# The hub VM
resource "azurerm_virtual_machine" "hub-vm" {
  name                  = "hub-vm"
  location            = local.hub-location
  resource_group_name = var.hubRgName
  network_interface_ids = [azurerm_network_interface.hub-nic.id]
  vm_size               = var.vmsize
  delete_os_disk_on_termination = true

  storage_image_reference {
    publisher = "Canonical"
    offer     = "UbuntuServer"
    sku       = "16.04-LTS"
    version   = "latest"
  }

  storage_os_disk {
    name              = "myosdisk1"
    caching           = "ReadWrite"
    create_option     = "FromImage"
    managed_disk_type = "Standard_LRS"
  }

  os_profile {
    computer_name  = "hub-vm"
    admin_username = var.username
    admin_password = var.password
    #custom_data    = file("hub/cloud-init.sh")
    #### TO TEST CLOUDINIT
    custom_data = data.template_cloudinit_config.config.rendered
    #### TO TEST CLOUDINIT
  }

  os_profile_linux_config {
    disable_password_authentication = false
  }
}






######################################################################
# vpc1  10.126.0.0/22  + 180.44.0.0/22
resource "aws_vpc" "rmg_vpc1" {
  cidr_block = "10.126.0.0/22"
  enable_dns_support = "true"
  enable_dns_hostnames = "true"
  tags = {
    Name = "rmg_vpc1"
  }
}

resource "aws_vpc_ipv4_cidr_block_association" "secondary_cidr1" {
  vpc_id     = aws_vpc.rmg_vpc1.id
  cidr_block = "180.44.0.0/22"
}
##################################
# Subnets for VPC1
resource "aws_subnet" "public11" {
  vpc_id            = aws_vpc_ipv4_cidr_block_association.secondary_cidr1.vpc_id
  cidr_block        = "180.44.0.0/25"
  availability_zone = "eu-west-1a"
  tags = {
    Name = "public11"
  }
}

resource "aws_subnet" "private11" {
  vpc_id            = aws_vpc.rmg_vpc1.id
  cidr_block        = "10.126.1.0/24"
  availability_zone = "eu-west-1a"
  tags = {
    Name = "private11"
  }
}

resource "aws_subnet" "nateable11" {
  vpc_id            = aws_vpc_ipv4_cidr_block_association.secondary_cidr1.vpc_id
  cidr_block        = "180.44.0.128/25"
  availability_zone = "eu-west-1a"
  tags = {
    Name = "nateable11"
  }
}

resource "aws_subnet" "routable11" {
  vpc_id            = aws_vpc_ipv4_cidr_block_association.secondary_cidr1.vpc_id
  cidr_block        = "180.44.1.0/24"
  availability_zone = "eu-west-1a"
  tags = {
    Name = "routable11"
  }
}

resource "aws_subnet" "routable12" {
  vpc_id            = aws_vpc_ipv4_cidr_block_association.secondary_cidr1.vpc_id
  cidr_block        = "180.44.2.0/24"
  availability_zone = "eu-west-1b"
  tags = {
    Name = "routable12"
  }
}


##################################
# igw1
resource "aws_internet_gateway" "iw1" {
  vpc_id = aws_vpc.rmg_vpc1.id
  tags = {
    Name = "iw1"
  }
}

##################################
# Route tables for subnets
# For public1 (to IGW1
resource "aws_route_table" "public1_rt" {
  vpc_id = aws_vpc.rmg_vpc1.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.iw1.id
  }
  tags = {
    Name = "public1_rt"
  }
}

# Asocia route table a subnet
resource "aws_route_table_association" "rmg_vpc1_public11_route_assoc" {
  subnet_id      = aws_subnet.public11.id
  route_table_id = aws_route_table.public1_rt.id
}

#resource "aws_route_table_association" "rmg_vpc1_public12_route_assoc" {
#  subnet_id      = aws_subnet.public12.id
#  route_table_id = aws_route_table.public1_rt.id
#}

#666# Route table para subnets routable11 y routable12 -> default a TGW
#666resource "aws_route_table" "routable11_rt" {
#666  vpc_id = aws_vpc.rmg_vpc1.id
#666  route {
#666    cidr_block = "0.0.0.0/0"
#666    transit_gateway_id = var.tgw1_id
#666  }
#666
#666
#666### 24/7/2020 quito esta ruta. Da error ya que la instance_id tiene 2 interfaces
#666###  y habría que especificar por cuàl, lo que no se hacer todavía
#666### incluiré la ruta a mano por el portal
#666/*
#666  route {
#666    cidr_block = "10.10.10.0/24"
#666    # Instancia routable11 (en su eth0 primario)
#666    instance_id = module.vpc1_routable11.ec2_server_id
#666  }
#666*/
#666
#666  tags = {
#666    Name = "routable11_rt"
#666  }
#666}


#777# Asocia route table a subnets routables
#777resource "aws_route_table_association" "rmg_vpc1_routable11_route_assoc" {
#777  subnet_id      = aws_subnet.routable11.id
#777  route_table_id = aws_route_table.routable11_rt.id
#777}
#777
#777
#777# Route table para subnets routable11 y routable12 -> default a TGW
#777resource "aws_route_table" "routable12_rt" {
#777  vpc_id = aws_vpc.rmg_vpc1.id
#777  route {
#777    cidr_block = "0.0.0.0/0"
#777    transit_gateway_id = var.tgw1_id
#777  }
#777  tags = {
#777    Name = "routable12_rt"
#777  }
#777}
#777
#777resource "aws_route_table_association" "rmg_vpc1_routable12_route_assoc" {
#777  subnet_id      = aws_subnet.routable12.id
#777  route_table_id = aws_route_table.routable12_rt.id
#777}

#################################
# Route table para pruebas de NAT
# Incluye rutas a on-prem (180.16.0.0/24) o bien una default (0.0.0.0/0)
#  indicando como next hop el interface privado de la instancia nat
#  podría haber una por az para dividir el trafico
#  además podría ser una forma de "backup", cambiar ruta a instancia activa
#
/*
resource "aws_route_table" "private11_rt" {
  vpc_id = aws_vpc.rmg_vpc1.id
  route {
    cidr_block = "180.16.0.0/24"
    instance_id = module.vpc1_private11.ec2_server_id
  }
  tags = {
    Name = "private11_rt"
  }
}

# Asocia route table a subnet
resource "aws_route_table_association" "rmg_vpc1_private11_route_assoc" {
  subnet_id      = aws_subnet.private12.id
  route_table_id = aws_route_table.private11_rt.id
}
*/

##############################
# Security Groups
# Security group para permitir ssh, icmp y http
resource "aws_security_group" "allow_comm1" {
  name = "allow_comm1"
  tags = {
    Name = "allow_comm1"
  }
  vpc_id = aws_vpc.rmg_vpc1.id

  ingress {
    from_port = 22
    to_port = 22
    protocol = "tcp"
    cidr_blocks = [
      "0.0.0.0/0"]
  }

  ingress {
    from_port = -1
    to_port = -1
    protocol = "icmp"
    cidr_blocks = [
      "0.0.0.0/0"]
  }

  ingress {
    from_port = 80
    to_port = 80
    protocol = "tcp"
    cidr_blocks = [
      "0.0.0.0/0"]
  }

  egress {
    from_port = 0
    to_port = 0
    protocol = "-1"
    cidr_blocks = [
      "0.0.0.0/0"]
  }
}

# SG para acceso https 443 en inbound (test de Interface endpoint)
resource "aws_security_group" "allow_https443" {
  name = "allow_https443"
  tags = {
    Name = "allow_https443"
  }
  vpc_id = aws_vpc.rmg_vpc1.id

  ingress {
    from_port = 443
    to_port = 443
    protocol = "tcp"
    cidr_blocks = [
      "10.1.0.0/22"]
  }

  egress {
    from_port = 0
    to_port = 0
    protocol = "-1"
    cidr_blocks = [
      "0.0.0.0/0"]
  }
}

# VPC1 instances


module "vpc1_public11" {
  source             = "../instanceaws"
  aws_subnet_id = aws_subnet.public11.id
  aws_vpc_security_group_ids = [ aws_security_group.allow_comm1.id ]
  aws_tagname = "public11"
  aws_associate_public_ip_address = "true"
  aws_source_dest_check = true
  user_data = ""
}



# Private11 versión aws free tier...
module "vpc1_private11" {
  source             = "../instanceaws"
  aws_subnet_id = aws_subnet.private11.id
  aws_vpc_security_group_ids = [ aws_security_group.allow_comm1.id ]
  aws_tagname = "private11"
  aws_associate_public_ip_address = "false"
  aws_source_dest_check = false
  user_data = ""
}



#888# Routable11 - INSTANCIA NAT
#888module "vpc1_routable11" {
#888  source             = "../instanceubuntu"
#888  ubuntu_subnet_id = aws_subnet.routable11.id
#888  ubuntu_vpc_security_group_ids = [ aws_security_group.allow_comm1.id ]
#888  ubuntu_tagname = "routable11"
#888  ubuntu_associate_public_ip_address = "false"
#888  ubuntu_private_ip = "180.44.1.11"
#888  ubuntu_source_dest_check = false
#888#  user_data = ""
#888  user_data = file("./vpc1/start_commands_rout11_a.sh")
#888}

#888#  Elastic network th - ENI to attach to an instance as eht1
#888resource "aws_network_interface" "eni_nateable11" {
#888  subnet_id       = aws_subnet.nateable11.id
#888  private_ips     = ["180.44.0.155"]
#888  security_groups = [ aws_security_group.allow_comm1.id ]
#888  source_dest_check = false
#888
#888  attachment {
#888    instance     = module.vpc1_routable11.ec2_server_id
#888    device_index = 1
#888  }
#888}


#
#
/*
module "vpc1_private12" {
  source             = "../instanceubuntu"
  ubuntu_subnet_id = aws_subnet.private12.id
  ubuntu_vpc_security_group_ids = [ aws_security_group.allow_comm1.id ]
  ubuntu_tagname = "private12"
  ubuntu_associate_public_ip_address = "false"
  ubuntu_private_ip = "10.126.2.12"
  ubuntu_source_dest_check = true
  user_data = ""
#  user_data = file("./vpc2/start_python3_http_priv21.sh")
}
*/


module "vpc1_routable12" {
  source             = "../instanceubuntu"
  ubuntu_subnet_id = aws_subnet.routable12.id
  ubuntu_vpc_security_group_ids = [ aws_security_group.allow_comm1.id ]
  ubuntu_tagname = "routable12"
  ubuntu_associate_public_ip_address = "false"
  ubuntu_private_ip = "180.44.2.12"
  ubuntu_source_dest_check = false
  user_data = ""
#  user_data = file("./vpc2/start_python3_http_priv21.sh")
}




# Llamada modulo de vpcendpoint
#
/*
module "vpc1_interf_endpoint1" {
  source           = "../vpcendpoint"
  vpc_id           = aws_vpc.rmg_vpc1.id
  ptfe_service     = var.servicio_en_vpc3_name
  ptfe_secgroup    = aws_security_group.allow_comm1.id
  ptfe_subnet_ids  = [aws_subnet.routable11.id, aws_subnet.routable12.id]
}
*/


# Network Load Balancer for VPC1
# Attached to subnets routable11 y routable12
# Target is type ip from another vpc
# Health check must be disabled as target IP really does not exist


#AAAmodule "nlbvpc1" {
#AAA  source             = "../modulenlb"
#AAA  name               = "nlbvpc1"
#AAA  load_balancer_type = "network"
#AAA  internal           = true
#AAA  subnets            = [aws_subnet.routable11.id,aws_subnet.routable12.id]
#AAA  vpc_id             = aws_vpc.rmg_vpc1.id
#AAA  # Target type should be ip (10.10.10.1 to be routed to NAT and DNATed)
#AAA  # Target must be ip (of vpc or a RFC ...)
#AAA  target_type        = "ip"
#AAA  target1            = "10.10.10.1"
#AAA  #
#AAA}
#AAA
#AAA
#AAA# VPC endpoint service
#AAA# Para exponer un servicio (asociado a un Network Load Balancer)
#AAA# Al habilitarlo, habilitar el "output" correspondiente al nombre del servicio
#AAAresource "aws_vpc_endpoint_service" "servicio_en_vpc1" {
#AAA  acceptance_required        = false
#AAA  network_load_balancer_arns = [module.nlbvpc1.nlb_arn]
#AAA}
#AAA






<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<<< 8/6/2021 Install and config a BIND DNS in Azure ubuntu
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

Para ubuntu 20.04 (Consenso de varias web)

sudo apt update
sudo apt install bind9 bind9utils bind9-doc dnsutils bind9-host

check version:
named -v

By default, BIND automatically starts after installation.You check its status with:

systemctl status bind9

If it’s not running, then start it with:

sudo systemctl start bind9

And enable auto start at boot time:

sudo systemctl enable bind9

The BIND server will run as the bind user, which is created during installation, and listens on TCP and UDP port 53, as can be seen by running the following command:

sudo netstat -lnptu | grep named

The BIND daemon is called named. (A daemon is a piece of software that runs in the background.) The named binary is installed by the bind9 package and there’s another important binary: rndc, the remote name daemon controller, which is installed by the bind9utils package. The rndc binary is used to reload/stop and control other aspects of the BIND daemon. Communication is done over TCP port 953.

For example, we can check the status of the BIND name server.

sudo rndc status




Configurations for a Local DNS Resolver

/etc/bind/ is the directory that contains configurations for BIND.

    named.conf: the primary config file which includes configs of three other files.
    db.127: localhost IPv4 reverse mapping zone file.
    db.local: localhost forward IPv4 and IPv6 mapping zone file.
    db.empty: an empty zone file

The main BIND configuration file /etc/bind/named.conf sources the settings from 3 other files.

    /etc/bind/named.conf.options
    /etc/bind/named.conf.local
    /etc/bind/named.conf.default-zones

To enable recursion service, edit the first file.

sudo nano /etc/bind/named.conf.options

In the options clause, add the following lines. Replace IP addresses in the allow-recursion statement with your own local network addresses.

 // hide version number from clients for security reasons.
 version "not currently available";

 // optional - BIND default behavior is recursion
 recursion yes;

 // provide recursion service to trusted clients only
 allow-recursion { 127.0.0.1; 192.168.0.0/24; 10.10.10.0/24; };

 // enable the query log
 querylog yes;




Configuración:
All configuration files located in /etc/bind/
The main configuration file is named.conf.options, let's open it

sudo nano /etc/bind/named.conf.options.

Some "directives" for this "options" file:

To specify which networks the server will serve (accept queries?). If specify "any" accepts all.
listen-on {10.10.10.0/24;10.1.0.0/16;...};

¿¿ What is this allow-query
allow-query { any; };

Forwareders -> contain the IP addresses of DNS servers to which the request is redirected if our server does not contain the required data.
forwarders {8.8.8.8;8.8.4.4;};

8/6/2021 Example to modify and seems to be working
options {
 directory "/var/cache/bind";
 dnssec-validation auto;
 auth-nxdomain no;    # conform to RFC1035
 // listen-on-v6 { any; };
 listen-on port 53 { localhost; any; };
 allow-query { localhost; any; };
 forwarders { 8.8.8.8; };
 recursion yes;
 querylog yes;
};


To check the configuration
sudo named-checkconf

To reload the server so the new config takes place
sudo systemctl restart bind9

Check status with
sudo systemctl status bind9


Next Important Configuration file is “/etc/bind/named.conf.local“, in this file we will define the zone files for our domain, edit the file add the following entries:

sudo vi named.conf.local
zone    "linuxtechi.corp"   {
        type master;
        file    "/etc/bind/forward.linuxtechi.corp";
 };

zone   "0.0.10.in-addr.arpa"        {
       type master;
       file    "/etc/bind/reverse.linuxtechi.corp";
 };




AND NOW THE ZONE FILES ABOVE REFERENCED


sudo vi forward.linuxtechi.corp
$TTL    604800

@       IN      SOA     primary.linuxtechi.corp. root.primary.linuxtechi.corp. (
                              6         ; Serial
                         604820         ; Refresh
                          86600         ; Retry
                        2419600         ; Expire
                         604600 )       ; Negative Cache TTL

;Name Server Information
@       IN      NS      primary.linuxtechi.corp.

;IP address of Your Domain Name Server(DNS)
primary IN       A      10.0.1.44

;Mail Server MX (Mail exchanger) Record
linuxtechi.corp. IN  MX  10  mail.linuxtechi.corp.

;A Record for Host names
www     IN       A       10.0.1.50
mail    IN       A       10.0.1.60

;CNAME Record
ftp     IN      CNAME    www.linuxtechi.corp.





AND THE REVERSE FILE

sudo vi /etc/bind/reverse.linuxtechi.corp
$TTL    604800
@       IN      SOA     linuxtechi.corp. root.linuxtechi.corp. (
                             21         ; Serial
                         604820         ; Refresh
                          864500        ; Retry
                        2419270         ; Expire
                         604880 )       ; Negative Cache TTL

;Your Name Server Info
@       IN      NS      primary.linuxtechi.corp.
primary IN      A       10.0.1.44

;Reverse Lookup for Your DNS Server
44      IN      PTR     primary.linuxtechi.corp.

;PTR Record IP address to HostName
50      IN      PTR     www.linuxtechi.corp.
60      IN      PTR     mail.linuxtechi.corp.


THEN:

sudo systemctl restart bind9
sudo systemctl enlable bind9

In case the linux FW is running in the BIND server, use following comand to allow port 53

sudo ufw allow 53


Validating Syntax of bind9 configuration and Zone files

sudo named-checkconf /etc/bind/named.conf.local

sudo named-checkzone linuxtechi.local /etc/bind/forward.linuxtechi.local

sudo named-checkzone linuxtechi.local /etc/bind/reverse.linuxtechi.local


Testing the DNS server with dig & nslookup
To test out our BIND 9 DNS server, we will use another Ubuntu machine 
& will change its DNS to point out our DNS server. To change the DNS
 server, open ‘/etc/resol.conf‘ & make the following DNS entry,

sudo vi /etc/resolv.conf
search linuxtechi.corp
nameserver 192.168.0.40

dig primary.linuxtechi.local

dig -x 192.168.0.40

9/6/2021 OK, working up to here, in ubuntu 16.04 in Azure hub-spoke

